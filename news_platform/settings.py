# -*- coding: utf-8 -*-
"""
Django settings for news_platform project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from urllib.parse import urlparse

import pytz  # type: ignore
import sentry_sdk
from dotenv import load_dotenv
from sentry_sdk.integrations.celery import CeleryIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env files
load_dotenv("data/.env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-ut^e0pt(8g)wzhok&0hjitv#)c^pcq=#0jj9nx0vx%w_xslr(3"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "true").lower() == "true"
DEBUG = True
TESTING = os.environ.get("TESTING", "false").lower() == "true"
CELERY_TASK_ALWAYS_EAGER = (
    False  # true to run tasks synchronously for testing and development
)
print(f'Debug modus is turned {"on" if DEBUG else "off"}')

MAIN_HOST = os.environ.get("MAIN_HOST", "http://localhost")
HOSTS = os.environ.get("HOSTS", "http://localhost,http://127.0.0.1/").split(",")
CSRF_TRUSTED_ORIGINS = HOSTS
ALLOWED_HOSTS = [urlparse(url).netloc for url in HOSTS]
CORS_ALLOWED_ORIGINS = HOSTS

if (sentry_sdk_url := os.environ.get("SENTRY_URL", None)) is not None:
    sentry_sdk.init(
        dsn=sentry_sdk_url,
        enable_tracing=True,
        traces_sample_rate=1.0,
        profiles_sample_rate=1.0,
        integrations=[
            CeleryIntegration(monitor_beat_tasks=True),
        ],
    )
    SENTRY_SCRIPT_HEAD = """
        <script
            src="https://browser.sentry-cdn.com/8.0.0/bundle.tracing.replay.min.js"
            integrity="sha384-DIp1noZ8K3g+Eyo/7tMTZQNCQrsBen2/q9RIV2OhfLLfZ8yDxAtG5zvXK+PFbQCI"
            crossorigin="anonymous"
        ></script>
        <script
            src="https://js-de.sentry-cdn.com/bc344a8b7ea1a4ed090dfec87006eac8.min.js"
            crossorigin="anonymous"
        ></script>
    """
else:
    SENTRY_SCRIPT_HEAD = ""

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "celery",
    "import_export",
    "rest_framework",
    "rest_framework.authtoken",
    "django_extensions",
    "djoser",
    "webpush",
    "pwa",
    "articles",
    "feeds",
    "preferences",
    "markets",
    "django_celery_beat",
]


REST_FRAMEWORK = {
    "DEFAULT_METADATA_CLASS": "rest_framework.metadata.SimpleMetadata",
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("JWT",),
}


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

MIGRATION_MODULES = {
    "articles": "data.db_migrations.articles",
    "feeds": "data.db_migrations.feeds",
    "preferences": "data.db_migrations.preferences",
    "markets": "data.db_migrations.markets",
    "django_celery_beat": "data.db_migrations.django_celery_beat",
    "django_celery_beat": "data.db_migrations.django_celery_beat",
    "webpush": "data.db_migrations.webpush",
    "sessions": "data.db_migrations.sessions",
    "auth": "data.db_migrations.auth",
    "authtoken": "data.db_migrations.authtoken",
    "admin": "data.db_migrations.admin",
    "contenttypes": "data.db_migrations.contenttypes",
}

ROOT_URLCONF = "news_platform.urls"

TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            TEMPLATES_DIR,
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "news_platform.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "data/db.sqlite3",
        "OPTIONS": {
            "timeout": 20,  # seconds
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

PWA_APP_THEME_COLOR = "#dee2e6"
PWA_APP_BACKGROUND_COLOR = "#ffffff"
PWA_APP_DISPLAY = "standalone"
PWA_APP_SCOPE = "/"
PWA_APP_START_URL = "/"
PWA_APP_ORIENTATION = "any"
PWA_APP_ICONS = [{"src": "/static/apple-touch-icon.png", "sizes": "180x180"}]
PWA_APP_SHORTCUTS = [
    {
        "name": "Frontpage",
        "url": "/?categories=frontpage",
        "description": "Frontpage News",
    },
    {"name": "Sidebar", "url": "/?categories=sidebar", "description": "Newsticker"},
    {
        "name": "Read Later",
        "url": "/?read_later=true",
        "description": "Articles saved for reading later",
    },
]
PWA_APP_SPLASH_SCREEN = (
    [
        {
            "rel": "apple-touch-startup-image",
            "media": (
                f"(device-width: {min(int(width),int(height))}px) and (device-height:"
                f" {max(int(width),int(height))}px) and (-webkit-device-pixel-ratio:"
                f" {scale}) and (orientation:"
                f" {'landscape' if int(width) > int(height) else 'portrait'})"
            ),
            "src": f"static/splashscreens/{file}",
        }
        for file, width, height, scale in [
            (
                f,
                int(f.split("_")[1]),
                int(f.split("_")[2]),
                int(f.split("_")[3].split(".")[0]),
            )
            for f in os.listdir("./static/splashscreens")
            if os.path.isfile(os.path.join("./static/splashscreens", f))
            and ".png" in f
            and len(f.split("_")) == 4
        ]
    ]
    if os.path.isdir("./static/splashscreens")
    else []
)
PWA_APP_DIR = "ltr"


PWA_APP_LANG = LANGUAGE_CODE = os.getenv("LANGUAGE_CODE", "en-UK")
ALLOWED_LANGUAGES = os.getenv("ALLOWED_LANGUAGES", "*")
LOGOUT_REDIRECT_URL = "/"
SIDEBAR_TITLE = os.getenv("SIDEBAR_TITLE", "Latest News")

TIME_ZONE = CELERY_TIMEZONE = os.getenv("TIME_ZONE", "Europe/London")
TIME_ZONE_OBJ = pytz.timezone(TIME_ZONE)

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery settings
CELERY_BROKER_URL = "redis://localhost:6379"
CELERY_RESULT_BACKEND = "redis://localhost:6379"

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://localhost:6379",
    }
}


# Webpush
WEBPUSH_SETTINGS = {
    "VAPID_PUBLIC_KEY": os.environ.get(
        "WEBPUSH_PUBLIC_KEY",
        "BA85gAwHAU9o-4SjKIs5TUkMoHjnZETKWMYrPcMB8ZRpuRMXQn0RHiMvzmbHDylh2WJ-xs2PrJecRtuj1l7UiRw",
    ),
    "VAPID_PRIVATE_KEY": os.environ.get(
        "WEBPUSH_PRIVATE_KEY", "b9-6DJOZb3MXRwckJ6C3R3hazJ-99Fh2aQ6zrNibP_0"
    ),
    "VAPID_ADMIN_EMAIL": os.environ.get(
        "WEBPUSH_ADMIN_EMAIL", "news-platform@example.com"
    ),
}

# Custom Variables
FULL_TEXT_URL = os.environ.get("FULL_TEXT_URL", "http://ftr.fivefilters.org/")
FEED_CREATOR_URL = os.environ.get("FEED_CREATOR_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PWA_APP_DESCRIPTION = PWA_APP_NAME = CUSTOM_PLATFORM_NAME = os.getenv(
    "CUSTOM_PLATFORM_NAME", "Personal News Platform"
)
